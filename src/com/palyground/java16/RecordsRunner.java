package com.palyground.java16;

/**
 * Records are immutable data classes that require only the type and name of
 * fields.
 * 
 * The equals, hashCode, and toString methods, as well as the private, final
 *  fields and public constructor, are generated by the Java compiler.
 * 
 * - Records remove the boiler-plate code
 * - Compact Constructors are only allowed inside Records 
 * - Static variables are allowed inside records 
 * - Non-static variables are not allowed inside records
 * - Non-static methods are allowed and should be public
 * 
 * @author Amrut Deshpande
 *
 */
public class RecordsRunner {

	record Person(String name, String email) {
	}

	record CustomRecord(String name) {
		// custom implementation can be given if needed
		CustomRecord(String name) {
			this.name = "NAME_" + name;
		}
	}

	/**
	 * Or with a compact constructor
	 * 
	 * @param args
	 */

	record CustomRecord2(String name) {
		/*
		 * Compact constructor, this.name = name is implicit, only validation is
		 * explicitly mentioned
		 */
		CustomRecord2 {
			if (name.startsWith("A")) {
				throw new IllegalArgumentException("Invalid name!");
			}
		}
	}

	public static void main(String[] args) {
		Person p = new Person("AD", "ad@1234.com");

		System.out.println(p);

		System.out.println(p.email);

		CustomRecord2 cr23 = new CustomRecord2("C");
		System.out.println(cr23);
		CustomRecord2 cr2 = new CustomRecord2("AC");
	}
}
